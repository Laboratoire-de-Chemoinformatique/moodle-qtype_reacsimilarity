{"version":3,"file":"chemdoodle_canvas.min.js","sources":["../src/chemdoodle_canvas.js"],"sourcesContent":["import {generateOutputChemDoodle, retrieveCorrectDatas, retrieveScafold} from \"./api_helper\";\n\nexport const insert_cwc = (toreplaceid, name, inputname, readonly, questionid) => {\n  // Retrieve scaffold\n  const scaffold = retrieveScafold(questionid);\n  let ChemDoodle = window.ChemDoodleVar;\n  let location_isida = document.querySelector('#' + inputname);\n  let sketcher = document.querySelector('#'+name);\n\n  if (readonly){\n    sketcher = new ChemDoodle.ViewerCanvas(toreplaceid, 400, 300);\n    sketcher.emptyMessage = 'No data loaded';\n    style(sketcher);\n  }\n  else {\n    sketcher = new ChemDoodle.SketcherCanvas(toreplaceid, 550, 300, {useServices:false, oneMolecule:false});\n    style(sketcher);\n\n    let half_bond = document.getElementById(toreplaceid + '_button_bond_half_label');\n    half_bond.remove(); // Removing the \"halfbond\".\n\n    let initmol = ChemDoodle.readJSON(\"{\\\"m\\\":[{\\\"a\\\":[]}]}\");\n    sketcher.doChecks = true;\n    sketcher.loadMolecule(initmol['molecules'][0]);\n\n    const moodleform = document.getElementById(\"responseform\");\n    moodleform.addEventListener(\"submit\", function () {\n      let json_data = JSON.stringify(new ChemDoodle.io.JSONInterpreter().contentTo(sketcher.molecules, sketcher.shapes));\n      // We check if there is an answer, if not, we send an empty json, which can be loaded into the canvas.\n      if (json_data !== '{\\\"m\\\":[{\\\"a\\\":[]}]}') {\n        let reac = ChemDoodle.writeRXN(sketcher.getMolecules(), sketcher.shapes);\n        generateOutputChemDoodle(reac, json_data, location_isida);\n      }\n      return true;\n    });\n  }\n  let lastmol = document.getElementById(inputname).value;\n  sketcher.doChecks = true;\n  if(lastmol.length > 0) {\n    sketcher.doChecks = true;\n    let cmcmol = ChemDoodle.readJSON(JSON.parse(lastmol).json);\n    sketcher.loadContent(cmcmol['molecules'], cmcmol['shapes']);\n    sketcher.repaint();\n  }\n  else if (scaffold !== '' && scaffold) {\n    sketcher.doChecks = true;\n    let cmcmol = JSON.parse(scaffold);\n    let data = ChemDoodle.readJSON(cmcmol.json);\n    if (data.shapes.length !== 0) {\n      sketcher.loadContent(data['molecules'], data['shapes']);\n    } else {\n      sketcher.loadMolecule(data['molecules'][0]);\n    }\n  }\n  else { // Case ketcher not instantiated, we use the empty \"mol\".\n    let initmol = ChemDoodle.readJSON(\"{\\\"m\\\":[{\\\"a\\\":[]}]}\");\n    sketcher.loadMolecule(initmol['molecules'][0]);\n  }\n};\n\nconst style =  (sketcher)  => {\n  let ChemDoodle = window.ChemDoodleVar;\n  sketcher.styles.atoms_useJMOLColors = true;\n  sketcher.styles.bonds_clearOverlaps_2D = true;\n  ChemDoodle.ELEMENT['H'].jmolColor = 'black';\n  ChemDoodle.ELEMENT['S'].jmolColor = '#B9A130';\n};\n\nconst get_source =  (parent) => {\n  let buttonname = parent.getAttribute('name');\n  let textfieldid = 'id_answer_' + buttonname.substr(buttonname.length - 2, 1);\n  let source = document.querySelector(`#${textfieldid}`);\n  return source;\n};\n\nexport const insert_form  = () => {\n  let ChemDoodle = window.ChemDoodleVar;\n  ChemDoodle.ELEMENT['H'].jmolColor = 'black';\n  ChemDoodle.ELEMENT['S'].jmolColor = '#B9A130';\n  let sketcher = new ChemDoodle.SketcherCanvas('sketcher', 550, 300, {useServices:false, oneMolecule:false});\n  sketcher.styles.atoms_useJMOLColors = true;\n  sketcher.styles.bonds_clearOverlaps_2D = true;\n\n  let half_bond = document.getElementById('sketcher_button_bond_half_label');\n  half_bond.remove(); // removing the \"halfbond\"\n\n  document.querySelector('[classo=set-molfile]').addEventListener('click', function () {\n    let parent = this;\n    if (sketcher.shapes.length !== 0) {\n      let molfile = ChemDoodle.writeRXN(sketcher.getMolecules(), sketcher.shapes);\n      let json_data = JSON.stringify(new ChemDoodle.io.JSONInterpreter().contentTo(sketcher.molecules, sketcher.shapes));\n      window.console.log(json_data);\n      window.console.log(ChemDoodle.readJSON(json_data));\n      let box = get_source(parent);\n      generateOutputChemDoodle(molfile, json_data, box);\n      if (box.value.length >= 1) {\n        document.querySelector('[classo = mol_empty]').style.display = 'none';\n        document.querySelector('[classo = needreac]').style.display = 'none';\n      }\n    } else {\n\n      let neereacElt = document.querySelector('[classo = needreac]');\n      if (neereacElt.style.display == 'none') {\n        neereacElt.style.display = 'block';\n      } else {\n        neereacElt.style.display = 'none';\n      }\n    }\n  });\n\n  document.querySelector('[classo=load-molfile]').addEventListener('click', function () {\n    let $parent = this;\n    let box = get_source($parent);\n    if (box.value){\n      let val = JSON.parse(box.value);\n      let data = ChemDoodle.readJSON(val.json);\n      // avant de load, clear le canvas\n      sketcher.doChecks = true;\n      sketcher.loadContent(data['molecules'], data['shapes']);\n      document.querySelector('[classo = mol_empty]').style.display = 'none';\n    }\n  });\n  document.querySelector('[classo=clear_answer]').addEventListener('click', function () {\n    let $parent = this;\n    let box = get_source($parent);\n    if (box.value){\n      box.value = \"\";\n    }\n  });\n};\n\nconst get_source_preview = (parent) => {\n  let groupname = parent.getAttribute('data-groupname');\n  let textfieldid = 'id_answer_' + groupname.substr(groupname.length - 2, 1);\n  let source = document.querySelector(`#${textfieldid}`);\n  return source;\n};\n\nexport const insert_form_preview = () => {\n  let ChemDoodle = window.ChemDoodleVar;\n  // NodeList created.\n  let sketcherlist = document.getElementsByName('test_preview');\n  let listlength = sketcherlist.length;\n\n  // Loop and initialize Ketchers, add 'eventlisteners'.\n\n  for (let i = 0; i < listlength; ++i) {\n\n    // Change the id of the canvas initiated by Moodle.\n    let id = 'sketcher_preview';\n    id += i;\n    sketcherlist[i].id = id;\n    let sketcher = document.querySelector('#'+id);\n    sketcher = new ChemDoodle.ViewerCanvas(id, 250, 125);\n    sketcher.emptyMessage = 'No data loaded';\n    sketcher.styles.atoms_useJMOLColors = true;\n    sketcher.styles.bonds_clearOverlaps_2D = true;\n\n    // Locate the area of the answer.\n    // TODO better selector\n    let parent = sketcherlist[i].parentNode.parentNode.parentNode;\n    let box = get_source_preview(parent);\n    // We initiate the viewer canvas with a value.\n    if (box.value) {\n      let val = JSON.parse(box.value);\n      let data = ChemDoodle.readJSON(val.json);\n      sketcher.clear();\n      sketcher.doChecks = true;\n      sketcher.loadContent(data['molecules'], data['shapes']);\n    } else {\n      sketcher.clear();\n    }\n    let boxval = box.value;\n\n    // Loop each 5s and update the preview if the answer was modified.\n    setInterval(function () {\n      if (boxval !== box.value ) {\n        boxval = box.value;\n        if (boxval === \"\") {\n          sketcher.clear();\n        } else {\n          let val = JSON.parse(box.value);\n          let data = ChemDoodle.readJSON(val.json);\n          sketcher.clear();\n          sketcher.doChecks = true;\n          sketcher.loadContent(data['molecules'], data['shapes']);\n          sketcher.repaint();\n        }\n      }\n    }, 5000);\n  }\n};\nexport const insert_good_answer = (toreplaceid, name, questionid) => {\n  let ChemDoodle = window.ChemDoodleVar;\n  let sketcher = document.querySelector('#'+name);\n  sketcher = new ChemDoodle.ViewerCanvas(toreplaceid, 400, 300);\n\n  sketcher.emptyMessage = 'No data loaded';\n  sketcher.styles.atoms_useJMOLColors = true;\n  sketcher.styles.bonds_clearOverlaps_2D = true;\n\n  let correct_mol = retrieveCorrectDatas(questionid);\n\n  if (correct_mol.length > 0) {\n    let cmcmol = ChemDoodle.readJSON(correct_mol);\n    sketcher.doChecks = true;\n    sketcher.loadContent(cmcmol['molecules'], cmcmol['shapes']);\n  }\n};\n\nexport const insert_scaffold = () => {\n  let ChemDoodle = window.ChemDoodleVar;\n  let nameS = \"sketcherScaffold\";\n  let sketcherS = document.querySelector('#'+nameS);\n  sketcherS = new ChemDoodle.SketcherCanvas(nameS, 550, 300, {useServices:false, oneMolecule:false});\n\n  sketcherS.emptyMessage = 'No data loaded';\n  sketcherS.styles.atoms_useJMOLColors = true;\n  sketcherS.styles.bonds_clearOverlaps_2D = true;\n  sketcherS.repaint();\n\n  let scaffoldarea = document.querySelector(\"input[name=scaffold]\");\n  let scaffoldData = scaffoldarea.value;\n\n  if (scaffoldData.length > 0) {\n    sketcherS.doChecks = true;\n    let cmcmol = JSON.parse(scaffoldData);\n    let data = ChemDoodle.readJSON(cmcmol.json);\n\n    if (data.shapes.length !== 0) {\n      sketcherS.loadContent(data['molecules'], data['shapes']);\n    } else {\n      sketcherS.loadMolecule(data['molecules'][0]);\n    }\n  }\n\n  const moodleform = document.querySelector(\"form[data-qtype=reacsimilarity]\");\n  moodleform.addEventListener(\"submit\", function () {\n    var json_data = JSON.stringify(new ChemDoodle.io.JSONInterpreter().contentTo(sketcherS.molecules));\n    // We check if there is an answer, if not, we send an empty json, which can be loaded into the canvas.\n    if (json_data !== '{}') {\n      if (sketcherS.shapes.length !== 0) {\n        json_data = JSON.stringify(new ChemDoodle.io.JSONInterpreter().contentTo(sketcherS.molecules, sketcherS.shapes));\n        var molscaf = ChemDoodle.writeRXN(sketcherS.getMolecules(), sketcherS.shapes);\n      } else {\n        var molscaf = ChemDoodle.writeMOL(sketcherS.getMolecule());\n      }\n      if (molscaf !==\n        'Molecule from ChemDoodle Web Components\\n\\n'\n        +'http://www.ichemlabs.com\\n  1  0  0  0  0  0            999 V2000\\n'\n        +'    0.0000    0.0000    0.0000 C   0  0  0  0  0  0\\nM  END'\n      ) {\n        generateOutputChemDoodle(molscaf, json_data, scaffoldarea);\n      }\n    } else {\n      scaffoldarea.value = '';\n    }\n    return true;\n  });\n};"],"names":["toreplaceid","name","inputname","readonly","questionid","scaffold","ChemDoodle","window","ChemDoodleVar","location_isida","document","querySelector","sketcher","ViewerCanvas","emptyMessage","style","SketcherCanvas","useServices","oneMolecule","getElementById","remove","initmol","readJSON","doChecks","loadMolecule","addEventListener","json_data","JSON","stringify","io","JSONInterpreter","contentTo","molecules","shapes","reac","writeRXN","getMolecules","lastmol","value","length","cmcmol","parse","json","loadContent","repaint","data","styles","atoms_useJMOLColors","bonds_clearOverlaps_2D","ELEMENT","jmolColor","get_source","parent","buttonname","getAttribute","textfieldid","substr","this","molfile","console","log","box","display","neereacElt","val","get_source_preview","groupname","sketcherlist","getElementsByName","listlength","i","id","parentNode","clear","boxval","setInterval","correct_mol","nameS","sketcherS","scaffoldarea","scaffoldData","molscaf","writeMOL","getMolecule"],"mappings":"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"}